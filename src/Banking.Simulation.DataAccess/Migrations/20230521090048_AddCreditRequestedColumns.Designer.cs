// <auto-generated />
using System;
using Banking.Simulation.DataAccess.Connection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Banking.Simulation.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230521090048_AddCreditRequestedColumns")]
    partial class AddCreditRequestedColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BankFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreditAllowanceJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FailReason")
                        .HasColumnType("text");

                    b.Property<string>("NextSimulationFailReason")
                        .HasColumnType("text");

                    b.Property<string>("NextSimulationStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextSimulationStatusAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<float?>("RequestedCreditPercent")
                        .HasColumnType("real");

                    b.Property<decimal?>("RequestedCreditPricePerMonth")
                        .HasColumnType("numeric");

                    b.Property<string>("SourceJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.WebhookConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WebhookConfigs");
                });

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.Payment", b =>
                {
                    b.HasOne("Banking.Simulation.Core.Models.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.WebhookConfig", b =>
                {
                    b.HasOne("Banking.Simulation.Core.Models.Entities.Organization", null)
                        .WithMany("WebhookConfigs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Banking.Simulation.Core.Models.Entities.Organization", b =>
                {
                    b.Navigation("WebhookConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
